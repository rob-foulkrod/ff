---
import BaseLayout from '../layouts/BaseLayout.astro';

// Import league data
let leagueData;
try {
  leagueData = await import('../data/league-data.json').then(m => m.default);
} catch (error) {
  leagueData = { seasons: {}, family: { dads: [], sons: [] } };
}

// Family mappings
const familyData = leagueData.family || {
  dads: ['robfoulk', 'bbattles2', 'DaveKoz', 'Eric_K'],
  sons: ['jfoulkrod', 'devinbattles', 'michaelkoz', 'dakotadknutson']
};

// Sample head-to-head data (would be computed from actual matchup history)
const sampleHeadToHead = {
  'robfoulk-jfoulkrod': { wins: 12, losses: 8, games: 20 },
  'robfoulk-devinbattles': { wins: 15, losses: 5, games: 20 },
  'bbattles2-jfoulkrod': { wins: 7, losses: 13, games: 20 },
  'bbattles2-devinbattles': { wins: 18, losses: 2, games: 20 },
  'DaveKoz-michaelkoz': { wins: 16, losses: 4, games: 20 },
  'Eric_K-dakotadknutson': { wins: 9, losses: 11, games: 20 }
};

// Generate all possible matchups
const generateMatchups = () => {
  const allUsers = [...familyData.dads, ...familyData.sons];
  const matchups = [];
  
  for (let i = 0; i < allUsers.length; i++) {
    for (let j = i + 1; j < allUsers.length; j++) {
      const user1 = allUsers[i];
      const user2 = allUsers[j];
      const key = `${user1}-${user2}`;
      const reverseKey = `${user2}-${user1}`;
      
      let record = sampleHeadToHead[key] || sampleHeadToHead[reverseKey];
      if (!record) {
        // Generate random record for demo
        const games = Math.floor(Math.random() * 20) + 10;
        const wins = Math.floor(Math.random() * games);
        record = { wins, losses: games - wins, games };
      }
      
      // Determine if this is a family rivalry
      const isFamilyRivalry = 
        (familyData.dads.includes(user1) && familyData.sons.includes(user2)) ||
        (familyData.sons.includes(user1) && familyData.dads.includes(user2));
      
      matchups.push({
        user1,
        user2,
        ...record,
        winPercentage: ((record.wins / record.games) * 100).toFixed(1),
        isFamilyRivalry,
        category: isFamilyRivalry ? 'family' : 'general'
      });
    }
  }
  
  return matchups;
};

const allMatchups = generateMatchups();
const familyRivalries = allMatchups.filter(m => m.isFamilyRivalry);
const generalRivalries = allMatchups.filter(m => !m.isFamilyRivalry);

// Sort by competitiveness (closest to 50% win rate)
const sortByCompetitiveness = (a, b) => {
  const aDistance = Math.abs(parseFloat(a.winPercentage) - 50);
  const bDistance = Math.abs(parseFloat(b.winPercentage) - 50);
  return aDistance - bDistance;
};

familyRivalries.sort(sortByCompetitiveness);
generalRivalries.sort(sortByCompetitiveness);

// Helper function to get display name
const getDisplayName = (username) => {
  const names = {
    'robfoulk': 'Rob (Dad)',
    'jfoulkrod': 'Jake (Son)',
    'bbattles2': 'Brian (Dad)',
    'devinbattles': 'Devin (Son)',
    'DaveKoz': 'Dave (Dad)',
    'michaelkoz': 'Michael (Son)',
    'Eric_K': 'Eric (Dad)',
    'dakotadknutson': 'Dakota (Son)'
  };
  return names[username] || username;
};
---

<BaseLayout title="Rivalries" description="Head-to-head records and family rivalries in FoulkNFootball">
  <div class="space-y-8">
    <!-- Page Header -->
    <div class="text-center">
      <h1 class="text-5xl font-bold mb-4">‚öîÔ∏è Rivalries</h1>
      <p class="text-xl text-gray-600 dark:text-gray-400">
        The battles that define FoulkNFootball
      </p>
    </div>

    <!-- Family Rivalries Section -->
    <section>
      <h2 class="text-3xl font-bold mb-6 text-red-600 dark:text-red-400">üî• Family Rivalries</h2>
      <p class="text-gray-600 dark:text-gray-400 mb-6">
        When family bonds meet fantasy football competition...
      </p>
      
      <div class="grid md:grid-cols-2 gap-6">
        {familyRivalries.map(rivalry => (
          <div class="bg-gradient-to-r from-red-50 to-orange-50 dark:from-red-900/20 dark:to-orange-900/20 p-6 rounded-lg border-2 border-red-200 dark:border-red-800">
            <div class="flex justify-between items-center mb-4">
              <h3 class="text-xl font-bold">
                {getDisplayName(rivalry.user1)} vs {getDisplayName(rivalry.user2)}
              </h3>
              <span class="bg-red-600 text-white px-3 py-1 rounded-full text-sm font-bold">
                FAMILY
              </span>
            </div>
            
            <div class="grid grid-cols-3 gap-4 text-center">
              <div>
                <p class="text-2xl font-bold text-green-600">{rivalry.wins}</p>
                <p class="text-sm text-gray-600 dark:text-gray-400">Wins</p>
              </div>
              <div>
                <p class="text-2xl font-bold text-red-600">{rivalry.losses}</p>
                <p class="text-sm text-gray-600 dark:text-gray-400">Losses</p>
              </div>
              <div>
                <p class="text-2xl font-bold text-blue-600">{rivalry.winPercentage}%</p>
                <p class="text-sm text-gray-600 dark:text-gray-400">Win Rate</p>
              </div>
            </div>
            
            <div class="mt-4">
              <div class="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2">
                <div 
                  class="bg-green-600 h-2 rounded-full transition-all duration-300"
                  style={`width: ${rivalry.winPercentage}%`}
                ></div>
              </div>
            </div>
          </div>
        ))}
      </div>
    </section>

    <!-- General Rivalries Section -->
    <section>
      <h2 class="text-3xl font-bold mb-6 text-blue-600 dark:text-blue-400">üèÜ League Rivalries</h2>
      <p class="text-gray-600 dark:text-gray-400 mb-6">
        The most competitive matchups across the league
      </p>
      
      <div class="grid md:grid-cols-2 lg:grid-cols-3 gap-4">
        {generalRivalries.slice(0, 9).map(rivalry => (
          <div class="bg-white dark:bg-gray-800 p-4 rounded-lg shadow hover:shadow-lg transition-shadow">
            <h3 class="font-bold mb-2">
              {getDisplayName(rivalry.user1)} vs {getDisplayName(rivalry.user2)}
            </h3>
            
            <div class="text-sm text-gray-600 dark:text-gray-400 mb-2">
              {rivalry.wins}-{rivalry.losses} ({rivalry.games} games)
            </div>
            
            <div class="flex items-center space-x-2">
              <div class="flex-1 bg-gray-200 dark:bg-gray-700 rounded-full h-2">
                <div 
                  class="bg-blue-600 h-2 rounded-full"
                  style={`width: ${rivalry.winPercentage}%`}
                ></div>
              </div>
              <span class="text-sm font-bold">{rivalry.winPercentage}%</span>
            </div>
          </div>
        ))}
      </div>
    </section>

    <!-- Rivalry Categories -->
    <section class="bg-gray-50 dark:bg-gray-900 p-8 rounded-lg">
      <h2 class="text-3xl font-bold mb-6">üìä Rivalry Analysis</h2>
      
      <div class="grid md:grid-cols-3 gap-6">
        <div class="text-center">
          <h3 class="text-xl font-bold mb-2 text-red-600">üî• Most Heated</h3>
          <p class="text-sm text-gray-600 dark:text-gray-400 mb-2">Closest to 50/50 split</p>
          {familyRivalries[0] && (
            <div class="bg-white dark:bg-gray-800 p-3 rounded">
              <p class="font-bold">{getDisplayName(familyRivalries[0].user1)} vs {getDisplayName(familyRivalries[0].user2)}</p>
              <p class="text-sm">{familyRivalries[0].winPercentage}% win rate</p>
            </div>
          )}
        </div>
        
        <div class="text-center">
          <h3 class="text-xl font-bold mb-2 text-green-600">üí™ Most Dominant</h3>
          <p class="text-sm text-gray-600 dark:text-gray-400 mb-2">Biggest win percentage gap</p>
          {(() => {
            const mostDominant = [...familyRivalries, ...generalRivalries]
              .sort((a, b) => Math.abs(parseFloat(b.winPercentage) - 50) - Math.abs(parseFloat(a.winPercentage) - 50))[0];
            return mostDominant && (
              <div class="bg-white dark:bg-gray-800 p-3 rounded">
                <p class="font-bold">{getDisplayName(mostDominant.user1)} vs {getDisplayName(mostDominant.user2)}</p>
                <p class="text-sm">{mostDominant.winPercentage}% win rate</p>
              </div>
            );
          })()}
        </div>
        
        <div class="text-center">
          <h3 class="text-xl font-bold mb-2 text-blue-600">üìà Most Games</h3>
          <p class="text-sm text-gray-600 dark:text-gray-400 mb-2">Longest rivalry history</p>
          {(() => {
            const mostGames = [...familyRivalries, ...generalRivalries]
              .sort((a, b) => b.games - a.games)[0];
            return mostGames && (
              <div class="bg-white dark:bg-gray-800 p-3 rounded">
                <p class="font-bold">{getDisplayName(mostGames.user1)} vs {getDisplayName(mostGames.user2)}</p>
                <p class="text-sm">{mostGames.games} total games</p>
              </div>
            );
          })()}
        </div>
      </div>
    </section>

    <!-- Coming Soon -->
    <section class="bg-purple-50 dark:bg-purple-900/20 p-6 rounded-lg text-center">
      <h2 class="text-2xl font-bold mb-4 text-purple-800 dark:text-purple-300">üöÄ Coming Soon</h2>
      <div class="grid md:grid-cols-2 gap-4 max-w-2xl mx-auto">
        <div class="bg-white dark:bg-gray-800 p-4 rounded">
          <h3 class="font-bold mb-2">Interactive Head-to-Head Grid</h3>
          <p class="text-sm text-gray-600 dark:text-gray-400">
            Full matrix view of all matchups with filtering
          </p>
        </div>
        <div class="bg-white dark:bg-gray-800 p-4 rounded">
          <h3 class="font-bold mb-2">Rivalry Timeline</h3>
          <p class="text-sm text-gray-600 dark:text-gray-400">
            See how rivalries have evolved over the seasons
          </p>
        </div>
      </div>
    </section>
  </div>
</BaseLayout>

<style>
  .rivalry-card {
    transition: transform 0.2s ease;
  }
  
  .rivalry-card:hover {
    transform: translateY(-2px);
  }
</style>
